"use client"

import type React from "react"

/**
 * @author: @dorian_baffier
 * @description: Particle Button
 * @version: 1.0.0
 * @date: 2025-06-26
 * @license: MIT
 * @website: https://kokonutui.com
 * @github: https://github.com/kokonut-labs/kokonutui
 */

import { useState, useRef, type RefObject } from "react"
import { Button } from "@/components/ui/button"
import { motion, AnimatePresence } from "motion/react"
import { cn } from "@/lib/utils"
import type { ButtonProps } from "@/components/ui/button"
import { MousePointerClick } from "lucide-react"

interface ParticleButtonProps extends ButtonProps {
  onSuccess?: () => void
  successDuration?: number
}

function SuccessParticles({
  buttonRef,
}: {
  buttonRef: React.RefObject<HTMLButtonElement>
}) {
  const rect = buttonRef.current?.getBoundingClientRect()
  if (!rect) return null

  const centerX = rect.left + rect.width / 2
  const centerY = rect.top + rect.height / 2

  return (
    <AnimatePresence>
      {[...Array(6)].map((_, i) => (
        <motion.div
          key={i}
          className="fixed w-1 h-1 bg-black dark:bg-white rounded-full"
          style={{ left: centerX, top: centerY }}
          initial={{
            scale: 0,
            x: 0,
            y: 0,
          }}
          animate={{
            scale: [0, 1, 0],
            x: [0, (i % 2 ? 1 : -1) * (Math.random() * 50 + 20)],
            y: [0, -Math.random() * 50 - 20],
          }}
          transition={{
            duration: 0.6,
            delay: i * 0.1,
            ease: "easeOut",
          }}
        />
      ))}
    </AnimatePresence>
  )
}

export default function ParticleButton({
  children,
  onClick,
  onSuccess,
  successDuration = 1000,
  className,
  ...props
}: ParticleButtonProps) {
  const [showParticles, setShowParticles] = useState(false)
  const buttonRef = useRef<HTMLButtonElement>(null)

  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {
    setShowParticles(true)

    if (onClick) {
      onClick(e)
    }

    setTimeout(() => {
      setShowParticles(false)
    }, successDuration)
  }

  return (
    <>
      {showParticles && <SuccessParticles buttonRef={buttonRef as RefObject<HTMLButtonElement>} />}
      <Button
        ref={buttonRef}
        onClick={handleClick}
        className={cn(
          "relative border border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm hover:border-gray-300 dark:hover:border-gray-600 hover:bg-white/90 dark:hover:bg-gray-900/90 shadow-sm hover:shadow-md transition-all duration-200",
          "!text-gray-900 dark:!text-gray-100",
          showParticles && "scale-95",
          "transition-transform duration-100",
          className,
        )}
        {...props}
      >
        {children}
        <MousePointerClick className="h-4 w-4" />
      </Button>
    </>
  )
}
